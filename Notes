All G-MODE Archives games will be different processes for translating but for this specific one here are the things that needed to be changed to fully translate the game in English. Games in a "series" like this one and the 3 Beach Volleyball games it spun off of all seem to be structurally similiar so a lot of the same process can be done for those games, but YMMV with other titles. Will make a writeup for any future G-MODE translation patches.

Managed\Metadata\global-metadata.dat - Edited with https://github.com/JeremieCHN/MetaDataStringEditor/releases 

Don't have the time/resources to fork this and recompile in English but here is a rough translation to use this:
Top Toolbar:
加载 = Open file
另存为 = Save file (must create new file every time, cannot just overwrite global-metadata.dat)
关闭文件 = Clear/remove file
下一个 = Search

Columns:
原字符串 = Original string
新字符串 = New string
是否修改 = * if modified, blank otherwise

Click on string -> 编辑 = Edit string

Edit String Box:
保存 = Save changes
放弃此次修改 = Discard Changes
还原该串的修改 = Revert changes

Not many strings needed to be edited for this one, although there were 3 lines that were sneakily injected into the tutorial text from here, I guess that's how G-MODE decided to implement a change without modifying game files, for this instance anyway.

Unity assets - Edited with https://github.com/nesrak1/UABEA/releases
StreamingAssets\prefab:
appliarchive - MonoBehavior Text files needed translating to English (autosave message etc)
howtoplay - 4 Texture2D files with controls, displayed outside of emulated game in G-MODE GUI
setting - MonoBehavior Text files needed translating to English (settings in G-MODE GUI, during emulated gameplay)
title - 1 Texture2D file (G-MODE Archives logo) and 1 MonoBehavior Text file (TitleDataModel) for splash screen text (name of game/description)

StreamingAssets:
localization - standard Unity file, contains one TextAsset for G-MODE GUI
scratchpad - Core game data is res.bin.

res.bin:
0x0000-0x06B6 - Table of Contents 
-> First 16 bytes header data/raw data size (0x000A-C is the size of the file minus the size of the ToC, example: 03D2CA - 6B7 = 03CC13)
-> 2 bytes prior to file name (09 2F for example for .gif files typically), file name, 4 bytes for file size (00 00 43 BB for example, first file in ToC)
-> Raw data begins at 0x06B7, no breaks between raw file data so what I did was just copy each chunk of bytes out into separate files based on file size provided in ToC, there were 5/6 gif files with Japanese graphics/text on them
-> All .txt files contained Japanese text that needed to be translated, there were no string length bytes to worry about so as long as it fit on screen, it worked fine just editing the line. All text was encoded in Shift-JIS.
-> tutorialData.bin -> This was a zip archive (PK file header) and inside was a .dat file with the full script for the tutorial messages encoded in UTF-8
-> tutorialData.dat: 0x0000-0x000C control bytes, at 0x000D is one byte for string length, followed by the string, and ending with 00 xx (xx = next string length), etc etc. There were no hardcoded limits for string length but I found 20-21 English characters were all that could fit per line.
-> Packed .dat file back into tutorialData.bin with 7-Zip, and copied that bin file's raw bytes back into res.bin

All modifications to res.bin were made with HxD, Hexinator (for Shift-JIS and UTF-8 encoded text viewing/editing) and GIMP for .gif images
